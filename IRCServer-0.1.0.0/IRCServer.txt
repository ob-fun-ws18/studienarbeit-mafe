-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/ob-fun-ws18/studienarbeit-mafe#readme</a>
@package IRCServer
@version 0.1.0.0


-- | This module handels information about the user
module User

-- | Type for storing user information
data User

-- | User with nickname, username, full name
FullUser :: String -> String -> String -> User

-- | User with nickname
NickUser :: String -> User

-- | User without information
NoUser :: User

-- | Converts the user information into the identifying string
toString :: User -> String
instance GHC.Classes.Eq User.User
instance GHC.Show.Show User.User


-- | This module contains functions to parse and build Messages.
module Client

-- | Messages that can be received from the client
data Msg
Plain :: String -> Msg

-- | Nickname message with the new nick
Nick :: String -> Msg

-- | User message with username and full name
User :: String -> String -> Msg

-- | Private message with receiver and content
PrivMsg :: String -> String -> Msg

-- | Join message with the channel
Join :: String -> Msg

-- | Join message with multiple channels
JoinMulti :: [String] -> Msg

-- | Part message with the channel name and message
Part :: String -> String -> Msg

-- | Ping message
Ping :: String -> Msg

-- | Quit with message
Quit :: String -> Msg

-- | Is on message with the nick names
IsOn :: [String] -> Msg

-- | This function parses the messages from the client.
parseMsg :: String -> Msg

-- | This function builds the messages for the client.
buildMsg :: User -> Msg -> String

-- | This function parses the additional information from the message.
parseCommand :: String -> String -> Msg
instance GHC.Classes.Eq Client.Msg
instance GHC.Show.Show Client.Msg


-- | This module contains functions for the handling of connections between
--   client and server.
module Server

-- | An event that should be handled by the main server
data Event

-- | A parsed message from a client
ClientMsg :: User -> Msg -> Event

-- | A new user can bea reached via the given handle
NewUser :: User -> Handle -> Event

-- | This type maps from the nicknames to the handles to the client.
type Users = (Map String Handle)

-- | This type maps channel names to the nicknames of the users in the
--   channel.
type Channels = (Map String [String])

-- | This function sets up the listening socket, starts the main server,
--   and starts a loop for accepting connections.
startServer :: PortNumber -> IO ()

-- | This function accepts new connections from clients and starts the
--   communication with them in a new thread.
acceptConnections :: Socket -> Chan Event -> IO ()

-- | The main server waits for events that the clients generate. It also
--   keeps track of the connected users and the channels. It modifies the
--   states and sends replys to the clients.
mainServer :: Chan Event -> Users -> Channels -> IO ()

-- | This function contains the main logic of how to react to the different
--   events. It processes the event, alters the users and the channel
--   information where neccessary and sends responses to the clients.
handleEvent :: Users -> Channels -> Event -> IO (Users, Channels)

-- | This function sends a message to a specified user.
sendToUser :: Users -> String -> String -> IO ()

-- | This function sends the same message to many users.
sendToAllUsers :: Users -> [String] -> String -> IO ()

-- | This function sets up the connection to a client and starts the loop
--   that handles the further communication.
startConn :: (Socket, SockAddr) -> Chan Event -> IO ()

-- | This function handles the communication from the client to the server.
--   It reads the messages, parses them, and acts accordingly.
loopConn :: Handle -> Chan Event -> User -> IO ()
isFinalMsg :: Msg -> Bool
handleMsg :: Handle -> User -> Msg -> (User, Maybe Event)
instance GHC.Classes.Eq Server.Event
instance GHC.Show.Show Server.Event
